object PackMain {
  val paths = Map(
    "initial-client-reactive" -> "examples.initial.outsourcedcomputation.reactive.Client",
    "initial-powerful-server-reactive" -> "examples.initial.outsourcedcomputation.reactive.PowerfulServer",
    "initial-weak-server-reactive" -> "examples.initial.outsourcedcomputation.reactive.WeakServer",
    "initial-client-remoteblock" -> "examples.initial.outsourcedcomputation.remoteblock.Client",
    "initial-powerful-server-remoteblock" -> "examples.initial.outsourcedcomputation.remoteblock.PowerfulServer",
    "initial-weak-server-remoteblock" -> "examples.initial.outsourcedcomputation.remoteblock.WeakServer",
    "initial-client-remotecall" -> "examples.initial.outsourcedcomputation.remotecall.Client",
    "initial-powerful-server-remotecall" -> "examples.initial.outsourcedcomputation.remotecall.PowerfulServer",
    "initial-weak-server-remotecall" -> "examples.initial.outsourcedcomputation.remotecall.WeakServer",
    "dynamic-client-remoteblock" -> "examples.dynamic.outsourcedcomputation.remoteblock.Client",
    "dynamic-powerful-server-remoteblock" -> "examples.dynamic.outsourcedcomputation.remoteblock.PowerfulServer",
    "dynamic-weak-server-remoteblock" -> "examples.dynamic.outsourcedcomputation.remoteblock.WeakServer",
    "dynamic-client-remotecall" -> "examples.dynamic.outsourcedcomputation.remotecall.Client",
    "dynamic-powerful-server-remotecall" -> "examples.dynamic.outsourcedcomputation.remotecall.PowerfulServer",
    "dynamic-weak-server-remotecall" -> "examples.dynamic.outsourcedcomputation.remotecall.WeakServer",
    "simplifiedrules-client-remoteblock" -> "examples.simplifiedrules.outsourcedcomputation.remoteblock.Client",
    "simplifiedrules-powerful-server-remoteblock" -> "examples.simplifiedrules.outsourcedcomputation.remoteblock.PowerfulServer",
    "simplifiedrules-weak-server-remoteblock" -> "examples.simplifiedrules.outsourcedcomputation.remoteblock.WeakServer",
    "selfreference-triangle-node-a" -> "examples.selfreference.triangle.NodeA",
    "selfreference-triangle-node-b" -> "examples.selfreference.triangle.NodeB",
    "selfreference-triangle-node-c" -> "examples.selfreference.triangle.NodeC",
    "recursive-abc-a" -> "examples.recursive.abc.A",
    "recursive-abc-b" -> "examples.recursive.abc.B",
    "recursive-abc-c" -> "examples.recursive.abc.C",
    "selfreference-sbj-a" -> "examples.selfreference.subjectivity.A",
    "selfreference-sbj-b" -> "examples.selfreference.subjectivity.B",
    "initial-valueref-Top" -> "examples.initial.valueref.Top",
    "initial-valueref-Bottom" -> "examples.initial.valueref.Bottom",
    "initial-valueref-Left" -> "examples.initial.valueref.Left",
    "initial-valueref-Right" -> "examples.initial.valueref.Right",
    "trust-TrustedKeyDB" -> "examples.valueref.TrustedKeyDB",
    "trust-PublicKeyDB" -> "examples.valueref.PublicKeyDB",
    "trust-ResourceManager" -> "examples.valueref.ResourceManager",
    "trust-KeyManager" -> "examples.valueref.KeyManager",
    "trust-SuperVisor" -> "examples.valueref.SuperVisor",
    "trust-Server" -> "examples.valueref.Server",
    "trust-Client" -> "examples.valueref.Client",
    "treedb-root" -> "casestudies.treedb.Root",
    "treedb-left" -> "casestudies.treedb.Left",
    "treedb-right" -> "casestudies.treedb.Right",
    "treedb-client" -> "casestudies.treedb.Client",
    "image-server" -> "casestudies.imageviewer.Server",
    "image-client" -> "casestudies.imageviewer.Client",
    "sessions-db" -> "casestudies.sessions.DB",
    "sessions-gateway" -> "casestudies.sessions.Gateway",
    "sessions-server" -> "casestudies.sessions.Server",
    "sessions-client" -> "casestudies.sessions.Client",
    "primesieve-server" -> "casestudies.primesieve.Server",
    "primesieve-gpu" -> "casestudies.primesieve.GPUServer",
    "primesieve-client" -> "casestudies.primesieve.Client",
    "funcsessions-server" -> "casestudies.functionalsessions.Server",
    "funcsessions-client" -> "casestudies.functionalsessions.Client",
    "a" -> "test.A",
    "b" -> "test.B",
  )
}
